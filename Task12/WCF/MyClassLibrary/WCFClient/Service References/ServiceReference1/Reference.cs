//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.34011
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFClient.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllOilfields", ReplyAction="http://tempuri.org/IService1/GetAllOilfieldsResponse")]
        MyClassLibrary.DataClasses.Oilfield[] GetAllOilfields(int accessor0);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllOilfields", ReplyAction="http://tempuri.org/IService1/GetAllOilfieldsResponse")]
        System.Threading.Tasks.Task<MyClassLibrary.DataClasses.Oilfield[]> GetAllOilfieldsAsync(int accessor0);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddOilfield", ReplyAction="http://tempuri.org/IService1/AddOilfieldResponse")]
        void AddOilfield(int accessor0, MyClassLibrary.DataClasses.Oilfield oil0);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddOilfield", ReplyAction="http://tempuri.org/IService1/AddOilfieldResponse")]
        System.Threading.Tasks.Task AddOilfieldAsync(int accessor0, MyClassLibrary.DataClasses.Oilfield oil0);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveOilfield", ReplyAction="http://tempuri.org/IService1/RemoveOilfieldResponse")]
        void RemoveOilfield(int accessor0, int indexOil0);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveOilfield", ReplyAction="http://tempuri.org/IService1/RemoveOilfieldResponse")]
        System.Threading.Tasks.Task RemoveOilfieldAsync(int accessor0, int indexOil0);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddWell", ReplyAction="http://tempuri.org/IService1/AddWellResponse")]
        void AddWell(int accessor0, MyClassLibrary.DataClasses.Well well0, string nameOil0);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddWell", ReplyAction="http://tempuri.org/IService1/AddWellResponse")]
        System.Threading.Tasks.Task AddWellAsync(int accessor0, MyClassLibrary.DataClasses.Well well0, string nameOil0);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveWell", ReplyAction="http://tempuri.org/IService1/RemoveWellResponse")]
        void RemoveWell(int accessor0, int indexWell0, string nameOil0);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveWell", ReplyAction="http://tempuri.org/IService1/RemoveWellResponse")]
        System.Threading.Tasks.Task RemoveWellAsync(int accessor0, int indexWell0, string nameOil0);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateOilfield", ReplyAction="http://tempuri.org/IService1/UpdateOilfieldResponse")]
        void UpdateOilfield(int accessor0, int indexOil0, MyClassLibrary.DataClasses.Oilfield oil0);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateOilfield", ReplyAction="http://tempuri.org/IService1/UpdateOilfieldResponse")]
        System.Threading.Tasks.Task UpdateOilfieldAsync(int accessor0, int indexOil0, MyClassLibrary.DataClasses.Oilfield oil0);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllOilfield", ReplyAction="http://tempuri.org/IService1/GetAllOilfieldResponse")]
        MyClassLibrary.DataClasses.Oilfield[] GetAllOilfield(int accessor0);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllOilfield", ReplyAction="http://tempuri.org/IService1/GetAllOilfieldResponse")]
        System.Threading.Tasks.Task<MyClassLibrary.DataClasses.Oilfield[]> GetAllOilfieldAsync(int accessor0);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOilfieldByIndex", ReplyAction="http://tempuri.org/IService1/GetOilfieldByIndexResponse")]
        MyClassLibrary.DataClasses.Oilfield GetOilfieldByIndex(int accessor0, int index0);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOilfieldByIndex", ReplyAction="http://tempuri.org/IService1/GetOilfieldByIndexResponse")]
        System.Threading.Tasks.Task<MyClassLibrary.DataClasses.Oilfield> GetOilfieldByIndexAsync(int accessor0, int index0);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CountOilfield", ReplyAction="http://tempuri.org/IService1/CountOilfieldResponse")]
        int CountOilfield(int accessor0);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CountOilfield", ReplyAction="http://tempuri.org/IService1/CountOilfieldResponse")]
        System.Threading.Tasks.Task<int> CountOilfieldAsync(int accessor0);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Clear", ReplyAction="http://tempuri.org/IService1/ClearResponse")]
        void Clear(int accessor0);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Clear", ReplyAction="http://tempuri.org/IService1/ClearResponse")]
        System.Threading.Tasks.Task ClearAsync(int accessor0);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WCFClient.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WCFClient.ServiceReference1.IService1>, WCFClient.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MyClassLibrary.DataClasses.Oilfield[] GetAllOilfields(int accessor0) {
            return base.Channel.GetAllOilfields(accessor0);
        }
        
        public System.Threading.Tasks.Task<MyClassLibrary.DataClasses.Oilfield[]> GetAllOilfieldsAsync(int accessor0) {
            return base.Channel.GetAllOilfieldsAsync(accessor0);
        }
        
        public void AddOilfield(int accessor0, MyClassLibrary.DataClasses.Oilfield oil0) {
            base.Channel.AddOilfield(accessor0, oil0);
        }
        
        public System.Threading.Tasks.Task AddOilfieldAsync(int accessor0, MyClassLibrary.DataClasses.Oilfield oil0) {
            return base.Channel.AddOilfieldAsync(accessor0, oil0);
        }
        
        public void RemoveOilfield(int accessor0, int indexOil0) {
            base.Channel.RemoveOilfield(accessor0, indexOil0);
        }
        
        public System.Threading.Tasks.Task RemoveOilfieldAsync(int accessor0, int indexOil0) {
            return base.Channel.RemoveOilfieldAsync(accessor0, indexOil0);
        }
        
        public void AddWell(int accessor0, MyClassLibrary.DataClasses.Well well0, string nameOil0) {
            base.Channel.AddWell(accessor0, well0, nameOil0);
        }
        
        public System.Threading.Tasks.Task AddWellAsync(int accessor0, MyClassLibrary.DataClasses.Well well0, string nameOil0) {
            return base.Channel.AddWellAsync(accessor0, well0, nameOil0);
        }
        
        public void RemoveWell(int accessor0, int indexWell0, string nameOil0) {
            base.Channel.RemoveWell(accessor0, indexWell0, nameOil0);
        }
        
        public System.Threading.Tasks.Task RemoveWellAsync(int accessor0, int indexWell0, string nameOil0) {
            return base.Channel.RemoveWellAsync(accessor0, indexWell0, nameOil0);
        }
        
        public void UpdateOilfield(int accessor0, int indexOil0, MyClassLibrary.DataClasses.Oilfield oil0) {
            base.Channel.UpdateOilfield(accessor0, indexOil0, oil0);
        }
        
        public System.Threading.Tasks.Task UpdateOilfieldAsync(int accessor0, int indexOil0, MyClassLibrary.DataClasses.Oilfield oil0) {
            return base.Channel.UpdateOilfieldAsync(accessor0, indexOil0, oil0);
        }
        
        public MyClassLibrary.DataClasses.Oilfield[] GetAllOilfield(int accessor0) {
            return base.Channel.GetAllOilfield(accessor0);
        }
        
        public System.Threading.Tasks.Task<MyClassLibrary.DataClasses.Oilfield[]> GetAllOilfieldAsync(int accessor0) {
            return base.Channel.GetAllOilfieldAsync(accessor0);
        }
        
        public MyClassLibrary.DataClasses.Oilfield GetOilfieldByIndex(int accessor0, int index0) {
            return base.Channel.GetOilfieldByIndex(accessor0, index0);
        }
        
        public System.Threading.Tasks.Task<MyClassLibrary.DataClasses.Oilfield> GetOilfieldByIndexAsync(int accessor0, int index0) {
            return base.Channel.GetOilfieldByIndexAsync(accessor0, index0);
        }
        
        public int CountOilfield(int accessor0) {
            return base.Channel.CountOilfield(accessor0);
        }
        
        public System.Threading.Tasks.Task<int> CountOilfieldAsync(int accessor0) {
            return base.Channel.CountOilfieldAsync(accessor0);
        }
        
        public void Clear(int accessor0) {
            base.Channel.Clear(accessor0);
        }
        
        public System.Threading.Tasks.Task ClearAsync(int accessor0) {
            return base.Channel.ClearAsync(accessor0);
        }
    }
}
